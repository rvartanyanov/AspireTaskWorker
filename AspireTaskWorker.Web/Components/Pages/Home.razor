@page "/"
@using AspireTaskWorker.ApiService.Models
@using AspireTaskWorker.Web.Services
@inject TaskWorkerApiClient taskWorkerApi
@inject RedisCacheService redis
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, welcome to the Task Monitor!</h1>

<button class="btn btn-primary" @onclick="StartTask">Start Task</button>
<br />
<input type="text" @bind="taskIdCheck" placeholder="Task ID" />
<button class="btn btn-primary" @onclick="CheckTaskProgress">Check Task</button>
<p>TaskID: @taskIdCheck, Progress: @progress %, Status: @status</p>

@if (tasks.Any())
{
    <p>Running tasks:</p>
    <ul>
        @foreach (var task in tasks)
        {
            <li>Task ID: @task</li>
        }
    </ul>
}

@code {
    private List<string> tasks = new List<string>();
    private string? taskIdCheck;
    private int progress;
    private string? status;

    private async Task StartTask()
    {
        var newTaskId = await taskWorkerApi.StartTask();
        tasks.Add(newTaskId);

        redis.SetTaskProgress(newTaskId, 0);

        _ = UpdateTaskProgressAsync(newTaskId); // Initiate async task progress update
    }

    private async Task UpdateTaskProgressAsync(string taskId)
    {
        TaskProgress? task;
        do
        {
            task = await taskWorkerApi.CheckTaskStatus(taskId);
            redis.SetTaskProgress(taskId, task.Progress);
        } while (task.Status != "Completed");
    }

    private void CheckTaskProgress()
    {
        if (!string.IsNullOrEmpty(taskIdCheck))
        {
            var taskProgress = redis.GetTaskProgress(taskIdCheck);
            if (taskProgress != null)
            {
                progress = int.Parse(taskProgress);
                status = progress == 100 ? "Completed" : "Started";
            }
            else
            {
                status = "Invalid Task Id";             
            }
            StateHasChanged();
        }
    }
}
